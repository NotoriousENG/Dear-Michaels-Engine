// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define REFLECT(objectType, __VA_ARGS__) struct Class { using ClassType = objectType; enum_t(IndexOf, size_t, { FOR_EACH(GET_FIELD_NAME, __VA_ARGS__) }); static constexpr Reflect::NoAnnotation NoNote {}; using Annotations = decltype(NoNote); static constexpr Annotations & annotations = NoNote; FOR_EACH(DESCRIBE_FIELD, __VA_ARGS__) static constexpr size_t TotalFields = COUNT_ARGUMENTS(__VA_ARGS__); static constexpr size_t TotalStaticFields = 0 FOR_EACH(ADD_IF_STATIC, __VA_ARGS__); static constexpr Reflect::Fields::Field<> Fields[TotalFields] = { FOR_EACH(GET_FIELD, __VA_ARGS__) }; template <typename Function> constexpr static void ForEachField(Function function) { FOR_EACH(USE_FIELD, __VA_ARGS__) } template <typename Function> static void ForEachField(objectType & object, Function function) { FOR_EACH(USE_FIELD_VALUE, __VA_ARGS__) } template <typename Function> static void ForEachField(const objectType & object, Function function) { FOR_EACH(USE_FIELD_VALUE, __VA_ARGS__) } template <typename Function> constexpr static void FieldAt(size_t fieldIndex, Function function) { switch ( fieldIndex ) { FOR_EACH(USE_FIELD_AT, __VA_ARGS__) } } template <typename Function> static void FieldAt(objectType & object, size_t fieldIndex, Function function) { switch ( fieldIndex ) { FOR_EACH(USE_FIELD_VALUE_AT, __VA_ARGS__) } } }; using Supers = Reflect::Inherit<Class::ClassType, Class::Annotations>;
